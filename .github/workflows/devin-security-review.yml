name: Devin Security Review

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Necesario para obtener el commit anterior
    
    - name: Get commit information
      id: commit-info
      run: |
        COMMIT_SHA="${{ github.sha }}"
        COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}"
        echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
        echo "commit_url=${COMMIT_URL}" >> $GITHUB_OUTPUT
        echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
    
    - name: Validate Devin API Key
      run: |
        if [ -z "${{ secrets.DEVIN_API_KEY }}" ]; then
          echo "❌ Error: DEVIN_API_KEY secret no está configurado"
          echo "Por favor configura el secret DEVIN_API_KEY en la configuración del repositorio"
          exit 1
        else
          echo "✅ DEVIN_API_KEY secret está configurado"
        fi
    
    - name: Trigger Devin Security Review
      id: devin-review
      run: |
        # Construir el prompt para Devin (escapando caracteres especiales)
        PROMPT="Revisa este repositorio y verifica que el commit que se está haciendo (${COMMIT_URL}) no contenga ninguna vulnerabilidad de seguridad.\n\nRepositorio: https://github.com/${{ github.repository }}\nCommit a revisar: ${COMMIT_URL}\n\nPor favor analiza:\n1. Vulnerabilidades de seguridad en el código\n2. Exposición de secretos o credenciales\n3. Inyección de código malicioso\n4. Configuraciones inseguras\n5. Dependencias con vulnerabilidades conocidas\n\nSi encuentras algún problema de seguridad, agrega un comentario detallado explicando:\n- Qué vulnerabilidad encontraste\n- Dónde se encuentra (archivo y línea)\n- Cómo solucionarla\n- Nivel de severidad (crítico, alto, medio, bajo)\n\nSi no encuentras problemas, confirma que el commit es seguro para ser integrado."

        echo "🚀 Iniciando llamada a la API de Devin..."
        
        # Crear el JSON payload usando jq para escapar correctamente
        JSON_PAYLOAD=$(jq -n \
          --arg prompt "$PROMPT" \
          --arg title "Security Review - Commit ${{ steps.commit-info.outputs.commit_sha }}" \
          '{
            prompt: $prompt,
            idempotent: true,
            title: $title
          }')
        
        echo "📋 JSON Payload creado correctamente"
        
        # Llamar a la API de Devin
        RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
          -H "Authorization: Bearer $DEVIN_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$JSON_PAYLOAD" \
          https://api.devin.ai/v1/sessions)
        
        # Separar el código HTTP del cuerpo de la respuesta
        HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
        RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
        
        echo "📡 HTTP Status: $HTTP_STATUS"
        echo "📋 Devin API Response: $RESPONSE_BODY"
        
        # Verificar el código de estado HTTP
        if [ "$HTTP_STATUS" -ne 200 ] && [ "$HTTP_STATUS" -ne 201 ]; then
          echo "❌ Error HTTP $HTTP_STATUS al llamar a la API de Devin"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        # Extraer session_id y url de la respuesta
        SESSION_ID=$(echo $RESPONSE_BODY | jq -r '.session_id // empty')
        SESSION_URL=$(echo $RESPONSE_BODY | jq -r '.url // empty')
        
        if [ -n "$SESSION_ID" ] && [ -n "$SESSION_URL" ]; then
          echo "session_id=${SESSION_ID}" >> $GITHUB_OUTPUT
          echo "session_url=${SESSION_URL}" >> $GITHUB_OUTPUT
          echo "✅ Devin security review iniciada exitosamente"
          echo "📋 Session ID: ${SESSION_ID}"
          echo "🔗 URL de la sesión: ${SESSION_URL}"
        else
          echo "❌ Error: No se pudo obtener session_id o url de la respuesta"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
      env:
        COMMIT_URL: ${{ steps.commit-info.outputs.commit_url }}
        DEVIN_API_KEY: ${{ secrets.DEVIN_API_KEY }}
    
    - name: Summary
      if: always()
      run: |
        echo "## 🔒 Resumen de Revisión de Seguridad" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit revisado:** ${{ steps.commit-info.outputs.commit_sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Repositorio:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.devin-review.outcome }}" = "success" ]; then
          echo "**Estado:** ✅ Revisión iniciada exitosamente" >> $GITHUB_STEP_SUMMARY
          echo "**Session ID:** ${{ steps.devin-review.outputs.session_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL de Devin:** ${{ steps.devin-review.outputs.session_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Accede a la revisión:" >> $GITHUB_STEP_SUMMARY
          echo "[Ver revisión en Devin](${{ steps.devin-review.outputs.session_url }})" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Estado:** ❌ Error al iniciar la revisión" >> $GITHUB_STEP_SUMMARY
        fi
